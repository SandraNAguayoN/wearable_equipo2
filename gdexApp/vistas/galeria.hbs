<nav class="navbar navbar-dark bg-dark">
    <div class="container-fluid">

        <div class="d-flex botones">
            <a href="#" class="enlace">Galeria</a>
            <a href="/" class="enlace">Datos</a>
            <!--Add buttons to initiate auth sequence and sign out-->
            <button id="authorize_button" class="btn btn-success" onclick="handleAuthClick()">Autorizar</button>
            <button id="signout_button" onclick="handleSignoutClick()">Cerrar Sesi√≥n</button>
        </div>
    </div>
</nav>
<div name="imagenes" class="cartasImagen centrar margen" id="imagenes">
</div>





<pre id="content" style="white-space: pre-wrap;"></pre>

<script type="text/javascript">
    /* exported gapiLoaded */
    /* exported gisLoaded */
    /* exported handleAuthClick */
    /* exported handleSignoutClick */

    // TODO(developer): Set to client ID and API key from the Developer Console
    const CLIENT_ID = '598905062994-t2p7cfj4n8u5sc4c8lve4vf5d3vepid0.apps.googleusercontent.com';
    const API_KEY = 'AIzaSyAsPoDAN3tcDu0ames1tThTcU3zjouxefE';


    // Discovery doc URL for APIs used by the quickstart
    const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';

    // Authorization scopes required by the API; multiple scopes can be
    // included, separated by spaces.
    const SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly';

    let tokenClient;
    let gapiInited = false;
    let gisInited = false;

    document.getElementById('authorize_button').style.visibility = 'hidden';
    document.getElementById('signout_button').style.visibility = 'hidden';

    /**
     * Callback after api.js is loaded.
     */
    function gapiLoaded() {
        gapi.load('client', initializeGapiClient);
    }

    /**
     * Callback after the API client is loaded. Loads the
     * discovery doc to initialize the API.
     */
    async function initializeGapiClient() {
        await gapi.client.init({
            apiKey: API_KEY,
            discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
        maybeEnableButtons();
    }

    /**
     * Callback after Google Identity Services are loaded.
     */
    function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
            client_id: CLIENT_ID,
            scope: SCOPES,
            callback: '', // defined later
        });
        gisInited = true;
        maybeEnableButtons();
    }

    /**
     * Enables user interaction after all libraries are loaded.
     */
    function maybeEnableButtons() {
        if (gapiInited && gisInited) {
            document.getElementById('authorize_button').style.visibility = 'visible';
        }
    }

    /**
     *  Sign in the user upon button click.
     */
    function handleAuthClick() {
        tokenClient.callback = async (resp) => {
            if (resp.error !== undefined) {
                throw (resp);
            }
            document.getElementById('signout_button').style.visibility = 'visible';
            document.getElementById('authorize_button').innerText = 'Refrescar';
            await listFiles();
        };

        if (gapi.client.getToken() === null) {
            // Prompt the user to select a Google Account and ask for consent to share their data
            // when establishing a new session.
            tokenClient.requestAccessToken({ prompt: 'consent' });
        } else {
            // Skip display of account chooser and consent dialog for an existing session.
            tokenClient.requestAccessToken({ prompt: '' });
        }
    }

    /**
     *  Sign out the user upon button click.
     */
    function handleSignoutClick() {
        const token = gapi.client.getToken();
        if (token !== null) {
            google.accounts.oauth2.revoke(token.access_token);
            gapi.client.setToken('');
            document.getElementById('content').innerText = '';
            document.getElementById('authorize_button').innerText = 'Authorize';
            document.getElementById('signout_button').style.visibility = 'hidden';
        }
    }

    /**
     * Print metadata for first 10 files.
     */


    async function listFiles() {
        let response;
        try {
            response = await gapi.client.drive.files.list({
                
                q: `'${'1Th-6fDJ6DedICFIqgXMgXYYpBJejRNPQ'}' in parents and trashed=false`,
                'pageSize': 100,
                'fields': 'files(id, name)',
            });
        } catch (err) {
            document.getElementById('content').innerText = err.message;
            return;
        }
        const files = response.result.files;
        if (!files || files.length == 0) {
            document.getElementById('content').innerText = 'No files found.';
            return;
        }
        // Flatten to string to display
        /* const output = files.reduce(
             (str, file) => `${str} (${file.id}\n`);
         const out2 = files.reduce((str, file) => `${str}  <img src="https://drive.google.com/uc?export=view&id=${file.id}" >\n`,
         'Files:\n');*/
        const imagen = document.getElementById('imagenes');
        files.forEach(element => {
            console.log(element.id)
            imagen.innerHTML += `<div class="card margen" style="width: 18rem;">
  <img src="https://drive.google.com/uc?export=view&id=`+ element.id + `" class="card-img-top" >

</div>`;
        });





    }
</script>
<script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
<script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>